1. Деревья - это структура данных, где у каждого узла есть свои потомки. У каждого дерева есть свой корневой узел.

2. Бинарные деревья - Мы называем дерево бинарным, если каждый узел в нем имеет не более двух дочерних элементов.
Хотя они и подходят для хранения иерархических данных, бинарные деревья этой общей формы не гарантируют быстрого поиска.
Итак, в худшем случае поиск занимает O(n) сложность, n - количество узлов в дереве.
Мы решаем эту проблему, обращаясь к особому типу двоичного дерева, называемому binary search tree (BST).

3. Бинарные деревья поиска (BST) - это деревья у которых не только есть два потомка, но и элемент в левом подузле всегда меньше элемента правого подузла (<).
Если смотреть сложность поиска элемента в этом дереве, то в худшем случае она равна высоте нашего дерева, тоесть O(h), h - высота дерева.
После определенных операций добавленя и удаления узлов, у нас сложность поиска может совпадать с количеством узлов в дереве. Тоесть например если мы будем
добавлять поочередно элементы 8, 10, 13, 11, то в таком дереве высота дерева, равно его количеству узлов, значит сложность поиска тоже равна количеству узлов.
Для того чтобы дерево использовалось для быстрого поиска необходимо после каждой вставки или удаления вершины выполнять перестроение дерева,
чтобы его высота оставалась минимальной, а само дерево оставалось сбалансированным.
Вот тут-то и пригодятся сбалансированные деревья. Это особый тип бинарного дерева поиска.

https://translated.turbopages.org/proxy_u/en-ru.ru.4cbd9a03-66e5340d-052c99b4-74722d776562/https/www.baeldung.com/cs/balanced-trees
4. Сбалансированное дерево - это дерево поиска, которое не просто поддерживает порядок между узлами. Оно также контролирует свою высоту,
следя за тем, чтобы она сохранялась O(log n) после вставки или удаления, где n-количество узлов.
Дерево считается идеально сбалансированным, если для каждой вершины дерева количества вершин в левом и правом поддеревьях различаются не более чем на 1.
Идеально сбалансированные деревья поиска обеспечивают минимальное время поиска. Однако операции балансировки идеально сбалансированного дерева,
которые необходимо выполнять при включении или исключении вершины, требуют больших временных затрат.
При частом включении и/ или исключении вершин поддерживать дерево идеально сбалансированным становится не выгодным из-за больших временных затрат
на балансировку. Выходом из такой ситуации является компромисс – менее строгое определение сбалансированности.

5. АВЛ-дерево - разновидность сбалансированного дерева, где высоты двух поддеревьев каждой вершины дерева отличаются
не более чем на 1(именно в этом и заключается балансировка дерева методом АВЛ).

6. Красно-Черные деревья - разновидность сбалансированного дерева, где:

По определению, RBT удовлетворяет этим условиям:
    - Каждый узел либо черный, либо красный.
    - Корень черный.
    - Каждый пустой узел (NULL или NIL) черного цвета.
    - Если узел красный, то оба его дочерних элемента черные.
    - Для каждого узла x пути от x, не включая его, к его дочерним листьям содержат одинаковое количество черных узлов.(листья - самые нижние узлы дерева)

Свойства RBT обеспечивают:
   - ни один путь от корня к листу не длиннее пути к другому листу более чем в два раза,
   - и что высота дерева равна O(\log n).

Красно-черные деревья гарантируют, что дерево остается приблизительно сбалансированным во время всех операций, что позволяет
выполнять операции поиска, вставки и удаления O(logn).

